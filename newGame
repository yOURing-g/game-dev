import pygame
import spritesheet

pygame.init()
WIDTH = 1280
HEIGHT = 720
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Sprite Show")

# Load sprite sheet
sprite_image = pygame.image.load("running_anim_13.png").convert_alpha()
sheet = spritesheet.SpriteSheet(sprite_image)
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)

frame_width = 160
frame_height = 167
frame_right = [
    sheet.get_image(0, 0, frame_width, frame_height),
    sheet.get_image(1, 0, frame_width, frame_height),
    sheet.get_image(2, 0, frame_width, frame_height),
    sheet.get_image(3, 0, frame_width, frame_height)
]

left_frame = [
    sheet.get_image(0, 1, frame_width, frame_height),
    sheet.get_image(1, 1, frame_width, frame_height),
    sheet.get_image(2, 1, frame_width, frame_height),
    sheet.get_image(3, 1, frame_width, frame_height)
]

# Frame and jump variables
FPS = 60
clock = pygame.time.Clock()
is_jumping = False
on_obstacle = False
gravity = 0.5
vertical_velocity = 0
jump_speed = 24
current_frame = 0
x_pos = 100
y_pos = HEIGHT - frame_height
movement_speed = 10
ground_level = HEIGHT - frame_height

obstacle = pygame.Rect(600, 300, 500, 200)

current_frames = frame_right

# Main game loop
running = True
while running:
    screen.fill(BLACK)
    pygame.draw.rect(screen, WHITE, obstacle)

    screen.blit(current_frames[current_frame], (x_pos, y_pos))
    player_box = pygame.Rect(x_pos, y_pos, frame_width, frame_height)

    if is_jumping or not on_obstacle:
        y_pos += vertical_velocity
        vertical_velocity += gravity

        # Check collision with the ground
        if y_pos >= ground_level:
            y_pos = ground_level
            is_jumping = False
            vertical_velocity = 0
            on_obstacle = False

        # Check collision with obstacle from above
        elif player_box.colliderect(obstacle):
            if vertical_velocity > 0 and player_box.bottom >= obstacle.top:
                y_pos = obstacle.top - frame_height
                is_jumping = False
                vertical_velocity = 0
                on_obstacle = True

    # Check if the player is moving left or right
    keys = pygame.key.get_pressed()
    if keys[pygame.K_RIGHT]:
        if x_pos + movement_speed + frame_width <= WIDTH:
            x_pos += movement_speed
        current_frames = frame_right
        current_frame = (current_frame + 1) % len(current_frames)
        player_box.x = x_pos

        # Check for collision while moving right
        if player_box.colliderect(obstacle):
            x_pos -= movement_speed  # Undo movement
        else:
            # If no longer on the obstacle, allow falling
            if on_obstacle and not player_box.colliderect(obstacle):
                on_obstacle = False
                is_jumping = True  # Start falling

    elif keys[pygame.K_LEFT]:
        if x_pos - movement_speed >= 0:
            x_pos -= movement_speed
        current_frames = left_frame
        current_frame = (current_frame + 1) % len(current_frames)
        player_box.x = x_pos


        if player_box.colliderect(obstacle):
            x_pos += movement_speed  # Undo movement
        else:
            if on_obstacle and not player_box.colliderect(obstacle):
                on_obstacle = False
                is_jumping = True  # Start falling


    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE and (not is_jumping or on_obstacle):
                is_jumping = True
                vertical_velocity = -jump_speed
                on_obstacle = False


    pygame.display.update()
    clock.tick(FPS)

pygame.quit()
